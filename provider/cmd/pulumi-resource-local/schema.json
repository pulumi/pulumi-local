{
    "name": "local",
    "displayName": "Local",
    "description": "A Pulumi package for creating and managing Local cloud resources.",
    "keywords": [
        "pulumi",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com/",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`local` Terraform Provider](https://github.com/terraform-providers/terraform-provider-local).",
    "repository": "https://github.com/pulumi/pulumi-local",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-local/sdk/go/local",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing Local cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-local)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-local` repo](https://github.com/pulumi/pulumi-local/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-local` repo](https://github.com/terraform-providers/terraform-provider-local/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/node": "^16.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-local)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-local` repo](https://github.com/pulumi/pulumi-local/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-local` repo](https://github.com/terraform-providers/terraform-provider-local/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {},
    "provider": {
        "description": "The provider type for the local package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n"
    },
    "resources": {
        "local:index/file:File": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as local from \"@pulumi/local\";\n\nconst foo = new local.File(\"foo\", {\n    content: \"foo!\",\n    filename: `${path.module}/foo.bar`,\n});\n```\n```python\nimport pulumi\nimport pulumi_local as local\n\nfoo = local.File(\"foo\",\n    content=\"foo!\",\n    filename=f\"{path['module']}/foo.bar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Local = Pulumi.Local;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Local.File(\"foo\", new()\n    {\n        Content = \"foo!\",\n        Filename = $\"{path.Module}/foo.bar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-local/sdk/go/local\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := local.NewFile(ctx, \"foo\", \u0026local.FileArgs{\n\t\t\tContent:  pulumi.String(\"foo!\"),\n\t\t\tFilename: pulumi.String(fmt.Sprintf(\"%v/foo.bar\", path.Module)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.local.File;\nimport com.pulumi.local.FileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new File(\"foo\", FileArgs.builder()        \n            .content(\"foo!\")\n            .filename(String.format(\"%s/foo.bar\", path.module()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: local:File\n    properties:\n      content: foo!\n      filename: ${path.module}/foo.bar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Content to store in the file, expected to be a UTF-8 encoded string.\nConflicts with `sensitive_content`, `content_base64` and `source`.\nExactly one of these four arguments must be specified.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Content to store in the file, expected to be binary encoded as base64 string.\nConflicts with `content`, `sensitive_content` and `source`.\nExactly one of these four arguments must be specified.\n"
                },
                "contentBase64sha256": {
                    "type": "string",
                    "description": "Base64 encoded SHA256 checksum of file content.\n"
                },
                "contentBase64sha512": {
                    "type": "string",
                    "description": "Base64 encoded SHA512 checksum of file content.\n"
                },
                "contentMd5": {
                    "type": "string",
                    "description": "MD5 checksum of file content.\n"
                },
                "contentSha1": {
                    "type": "string",
                    "description": "SHA1 checksum of file content.\n"
                },
                "contentSha256": {
                    "type": "string",
                    "description": "SHA256 checksum of file content.\n"
                },
                "contentSha512": {
                    "type": "string",
                    "description": "SHA512 checksum of file content.\n"
                },
                "directoryPermission": {
                    "type": "string",
                    "description": "Permissions to set for directories created (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0777\"`.\n"
                },
                "filePermission": {
                    "type": "string",
                    "description": "Permissions to set for the output file (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0777\"`.\n"
                },
                "filename": {
                    "type": "string",
                    "description": "The path to the file that will be created.\nMissing parent directories will be created.\nIf the file already exists, it will be overridden with the given content.\n"
                },
                "sensitiveContent": {
                    "type": "string",
                    "description": "Sensitive content to store in the file, expected to be an UTF-8 encoded string.\nWill not be displayed in diffs.\nConflicts with `content`, `content_base64` and `source`.\nExactly one of these four arguments must be specified.\nIf in need to use *sensitive* content, please use the `local.SensitiveFile`\nresource instead.\n",
                    "deprecationMessage": "Use the `local.SensitiveFile` resource instead",
                    "secret": true
                },
                "source": {
                    "type": "string",
                    "description": "Path to file to use as source for the one we are creating.\nConflicts with `content`, `sensitive_content` and `content_base64`.\nExactly one of these four arguments must be specified.\n"
                }
            },
            "required": [
                "contentBase64sha256",
                "contentBase64sha512",
                "contentMd5",
                "contentSha1",
                "contentSha256",
                "contentSha512",
                "directoryPermission",
                "filePermission",
                "filename"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "Content to store in the file, expected to be a UTF-8 encoded string.\nConflicts with `sensitive_content`, `content_base64` and `source`.\nExactly one of these four arguments must be specified.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Content to store in the file, expected to be binary encoded as base64 string.\nConflicts with `content`, `sensitive_content` and `source`.\nExactly one of these four arguments must be specified.\n"
                },
                "directoryPermission": {
                    "type": "string",
                    "description": "Permissions to set for directories created (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0777\"`.\n"
                },
                "filePermission": {
                    "type": "string",
                    "description": "Permissions to set for the output file (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0777\"`.\n"
                },
                "filename": {
                    "type": "string",
                    "description": "The path to the file that will be created.\nMissing parent directories will be created.\nIf the file already exists, it will be overridden with the given content.\n"
                },
                "sensitiveContent": {
                    "type": "string",
                    "description": "Sensitive content to store in the file, expected to be an UTF-8 encoded string.\nWill not be displayed in diffs.\nConflicts with `content`, `content_base64` and `source`.\nExactly one of these four arguments must be specified.\nIf in need to use *sensitive* content, please use the `local.SensitiveFile`\nresource instead.\n",
                    "deprecationMessage": "Use the `local.SensitiveFile` resource instead",
                    "secret": true
                },
                "source": {
                    "type": "string",
                    "description": "Path to file to use as source for the one we are creating.\nConflicts with `content`, `sensitive_content` and `content_base64`.\nExactly one of these four arguments must be specified.\n"
                }
            },
            "requiredInputs": [
                "filename"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering File resources.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Content to store in the file, expected to be a UTF-8 encoded string.\nConflicts with `sensitive_content`, `content_base64` and `source`.\nExactly one of these four arguments must be specified.\n"
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "Content to store in the file, expected to be binary encoded as base64 string.\nConflicts with `content`, `sensitive_content` and `source`.\nExactly one of these four arguments must be specified.\n"
                    },
                    "contentBase64sha256": {
                        "type": "string",
                        "description": "Base64 encoded SHA256 checksum of file content.\n"
                    },
                    "contentBase64sha512": {
                        "type": "string",
                        "description": "Base64 encoded SHA512 checksum of file content.\n"
                    },
                    "contentMd5": {
                        "type": "string",
                        "description": "MD5 checksum of file content.\n"
                    },
                    "contentSha1": {
                        "type": "string",
                        "description": "SHA1 checksum of file content.\n"
                    },
                    "contentSha256": {
                        "type": "string",
                        "description": "SHA256 checksum of file content.\n"
                    },
                    "contentSha512": {
                        "type": "string",
                        "description": "SHA512 checksum of file content.\n"
                    },
                    "directoryPermission": {
                        "type": "string",
                        "description": "Permissions to set for directories created (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0777\"`.\n"
                    },
                    "filePermission": {
                        "type": "string",
                        "description": "Permissions to set for the output file (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0777\"`.\n"
                    },
                    "filename": {
                        "type": "string",
                        "description": "The path to the file that will be created.\nMissing parent directories will be created.\nIf the file already exists, it will be overridden with the given content.\n"
                    },
                    "sensitiveContent": {
                        "type": "string",
                        "description": "Sensitive content to store in the file, expected to be an UTF-8 encoded string.\nWill not be displayed in diffs.\nConflicts with `content`, `content_base64` and `source`.\nExactly one of these four arguments must be specified.\nIf in need to use *sensitive* content, please use the `local.SensitiveFile`\nresource instead.\n",
                        "deprecationMessage": "Use the `local.SensitiveFile` resource instead",
                        "secret": true
                    },
                    "source": {
                        "type": "string",
                        "description": "Path to file to use as source for the one we are creating.\nConflicts with `content`, `sensitive_content` and `content_base64`.\nExactly one of these four arguments must be specified.\n"
                    }
                },
                "type": "object"
            }
        },
        "local:index/sensitiveFile:SensitiveFile": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as local from \"@pulumi/local\";\n\nconst foo = new local.SensitiveFile(\"foo\", {\n    content: \"foo!\",\n    filename: `${path.module}/foo.bar`,\n});\n```\n```python\nimport pulumi\nimport pulumi_local as local\n\nfoo = local.SensitiveFile(\"foo\",\n    content=\"foo!\",\n    filename=f\"{path['module']}/foo.bar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Local = Pulumi.Local;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Local.SensitiveFile(\"foo\", new()\n    {\n        Content = \"foo!\",\n        Filename = $\"{path.Module}/foo.bar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-local/sdk/go/local\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := local.NewSensitiveFile(ctx, \"foo\", \u0026local.SensitiveFileArgs{\n\t\t\tContent:  pulumi.String(\"foo!\"),\n\t\t\tFilename: pulumi.String(fmt.Sprintf(\"%v/foo.bar\", path.Module)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.local.SensitiveFile;\nimport com.pulumi.local.SensitiveFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new SensitiveFile(\"foo\", SensitiveFileArgs.builder()        \n            .content(\"foo!\")\n            .filename(String.format(\"%s/foo.bar\", path.module()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: local:SensitiveFile\n    properties:\n      content: foo!\n      filename: ${path.module}/foo.bar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Sensitive Content to store in the file, expected to be a UTF-8 encoded string.\nConflicts with `content_base64` and `source`.\nExactly one of these three arguments must be specified.\n",
                    "secret": true
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Sensitive Content to store in the file, expected to be binary encoded as base64 string.\nConflicts with `content` and `source`.\nExactly one of these three arguments must be specified.\n",
                    "secret": true
                },
                "contentBase64sha256": {
                    "type": "string",
                    "description": "Base64 encoded SHA256 checksum of file content.\n"
                },
                "contentBase64sha512": {
                    "type": "string",
                    "description": "Base64 encoded SHA512 checksum of file content.\n"
                },
                "contentMd5": {
                    "type": "string",
                    "description": "MD5 checksum of file content.\n"
                },
                "contentSha1": {
                    "type": "string",
                    "description": "SHA1 checksum of file content.\n"
                },
                "contentSha256": {
                    "type": "string",
                    "description": "SHA256 checksum of file content.\n"
                },
                "contentSha512": {
                    "type": "string",
                    "description": "SHA512 checksum of file content.\n"
                },
                "directoryPermission": {
                    "type": "string",
                    "description": "Permissions to set for directories created (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0700\"`.\n"
                },
                "filePermission": {
                    "type": "string",
                    "description": "Permissions to set for the output file (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0700\"`.\n"
                },
                "filename": {
                    "type": "string",
                    "description": "The path to the file that will be created.\nMissing parent directories will be created.\nIf the file already exists, it will be overridden with the given content.\n"
                },
                "source": {
                    "type": "string",
                    "description": "Path to file to use as source for the one we are creating.\nConflicts with `content` and `content_base64`.\nExactly one of these three arguments must be specified.\n"
                }
            },
            "required": [
                "contentBase64sha256",
                "contentBase64sha512",
                "contentMd5",
                "contentSha1",
                "contentSha256",
                "contentSha512",
                "directoryPermission",
                "filePermission",
                "filename"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "Sensitive Content to store in the file, expected to be a UTF-8 encoded string.\nConflicts with `content_base64` and `source`.\nExactly one of these three arguments must be specified.\n",
                    "secret": true
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Sensitive Content to store in the file, expected to be binary encoded as base64 string.\nConflicts with `content` and `source`.\nExactly one of these three arguments must be specified.\n",
                    "secret": true
                },
                "directoryPermission": {
                    "type": "string",
                    "description": "Permissions to set for directories created (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0700\"`.\n"
                },
                "filePermission": {
                    "type": "string",
                    "description": "Permissions to set for the output file (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0700\"`.\n"
                },
                "filename": {
                    "type": "string",
                    "description": "The path to the file that will be created.\nMissing parent directories will be created.\nIf the file already exists, it will be overridden with the given content.\n"
                },
                "source": {
                    "type": "string",
                    "description": "Path to file to use as source for the one we are creating.\nConflicts with `content` and `content_base64`.\nExactly one of these three arguments must be specified.\n"
                }
            },
            "requiredInputs": [
                "filename"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SensitiveFile resources.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Sensitive Content to store in the file, expected to be a UTF-8 encoded string.\nConflicts with `content_base64` and `source`.\nExactly one of these three arguments must be specified.\n",
                        "secret": true
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "Sensitive Content to store in the file, expected to be binary encoded as base64 string.\nConflicts with `content` and `source`.\nExactly one of these three arguments must be specified.\n",
                        "secret": true
                    },
                    "contentBase64sha256": {
                        "type": "string",
                        "description": "Base64 encoded SHA256 checksum of file content.\n"
                    },
                    "contentBase64sha512": {
                        "type": "string",
                        "description": "Base64 encoded SHA512 checksum of file content.\n"
                    },
                    "contentMd5": {
                        "type": "string",
                        "description": "MD5 checksum of file content.\n"
                    },
                    "contentSha1": {
                        "type": "string",
                        "description": "SHA1 checksum of file content.\n"
                    },
                    "contentSha256": {
                        "type": "string",
                        "description": "SHA256 checksum of file content.\n"
                    },
                    "contentSha512": {
                        "type": "string",
                        "description": "SHA512 checksum of file content.\n"
                    },
                    "directoryPermission": {
                        "type": "string",
                        "description": "Permissions to set for directories created (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0700\"`.\n"
                    },
                    "filePermission": {
                        "type": "string",
                        "description": "Permissions to set for the output file (before umask), expressed as string in\n[numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).\nDefault value is `\"0700\"`.\n"
                    },
                    "filename": {
                        "type": "string",
                        "description": "The path to the file that will be created.\nMissing parent directories will be created.\nIf the file already exists, it will be overridden with the given content.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Path to file to use as source for the one we are creating.\nConflicts with `content` and `content_base64`.\nExactly one of these three arguments must be specified.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "local:index/getFile:getFile": {
            "description": "Reads a file from the local filesystem.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as local from \"@pulumi/local\";\n\nconst foo = local.getFile({\n    filename: `${path.module}/foo.bar`,\n});\nconst sharedZip = new aws.s3.BucketObjectv2(\"sharedZip\", {\n    bucket: \"my-bucket\",\n    key: \"my-key\",\n    content: foo.then(foo =\u003e foo.content),\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_local as local\n\nfoo = local.get_file(filename=f\"{path['module']}/foo.bar\")\nshared_zip = aws.s3.BucketObjectv2(\"sharedZip\",\n    bucket=\"my-bucket\",\n    key=\"my-key\",\n    content=foo.content)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Local = Pulumi.Local;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Local.GetFile.Invoke(new()\n    {\n        Filename = $\"{path.Module}/foo.bar\",\n    });\n\n    var sharedZip = new Aws.S3.BucketObjectv2(\"sharedZip\", new()\n    {\n        Bucket = \"my-bucket\",\n        Key = \"my-key\",\n        Content = foo.Apply(getFileResult =\u003e getFileResult.Content),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3\"\n\t\"github.com/pulumi/pulumi-local/sdk/go/local\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := local.LookupFile(ctx, \u0026local.LookupFileArgs{\n\t\t\tFilename: fmt.Sprintf(\"%v/foo.bar\", path.Module),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = s3.NewBucketObjectv2(ctx, \"sharedZip\", \u0026s3.BucketObjectv2Args{\n\t\t\tBucket:  pulumi.Any(\"my-bucket\"),\n\t\t\tKey:     pulumi.String(\"my-key\"),\n\t\t\tContent: pulumi.String(foo.Content),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.local.LocalFunctions;\nimport com.pulumi.local.inputs.GetFileArgs;\nimport com.pulumi.aws.s3.BucketObjectv2;\nimport com.pulumi.aws.s3.BucketObjectv2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LocalFunctions.getFile(GetFileArgs.builder()\n            .filename(String.format(\"%s/foo.bar\", path.module()))\n            .build());\n\n        var sharedZip = new BucketObjectv2(\"sharedZip\", BucketObjectv2Args.builder()        \n            .bucket(\"my-bucket\")\n            .key(\"my-key\")\n            .content(foo.applyValue(getFileResult -\u003e getFileResult.content()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sharedZip:\n    type: aws:s3:BucketObjectv2\n    properties:\n      bucket: my-bucket\n      key: my-key\n      content: ${foo.content}\nvariables:\n  foo:\n    fn::invoke:\n      Function: local:getFile\n      Arguments:\n        filename: ${path.module}/foo.bar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFile.\n",
                "properties": {
                    "filename": {
                        "type": "string",
                        "description": "Path to the file that will be read. The data source will return an error if the file does not exist.\n"
                    }
                },
                "type": "object",
                "required": [
                    "filename"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFile.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Raw content of the file that was read, as UTF-8 encoded string. Files that do not contain UTF-8 text will have invalid UTF-8 sequences in `content`\nreplaced with the Unicode replacement character.\n"
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "Base64 encoded version of the file content (use this when dealing with binary data).\n"
                    },
                    "contentBase64sha256": {
                        "type": "string",
                        "description": "Base64 encoded SHA256 checksum of file content.\n"
                    },
                    "contentBase64sha512": {
                        "type": "string",
                        "description": "Base64 encoded SHA512 checksum of file content.\n"
                    },
                    "contentMd5": {
                        "type": "string",
                        "description": "MD5 checksum of file content.\n"
                    },
                    "contentSha1": {
                        "type": "string",
                        "description": "SHA1 checksum of file content.\n"
                    },
                    "contentSha256": {
                        "type": "string",
                        "description": "SHA256 checksum of file content.\n"
                    },
                    "contentSha512": {
                        "type": "string",
                        "description": "SHA512 checksum of file content.\n"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Path to the file that will be read. The data source will return an error if the file does not exist.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The hexadecimal encoding of the SHA1 checksum of the file content.\n"
                    }
                },
                "type": "object",
                "required": [
                    "content",
                    "contentBase64",
                    "contentBase64sha256",
                    "contentBase64sha512",
                    "contentMd5",
                    "contentSha1",
                    "contentSha256",
                    "contentSha512",
                    "filename",
                    "id"
                ]
            }
        },
        "local:index/getSensitiveFile:getSensitiveFile": {
            "description": "Reads a file that contains sensitive data, from the local filesystem.\n\nThe attributes exposed by this data source are marked as\nsensitive.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as local from \"@pulumi/local\";\n\nconst foo = local.getSensitiveFile({\n    filename: `${path.module}/foo.bar`,\n});\nconst sharedZip = new aws.s3.BucketObjectv2(\"sharedZip\", {\n    bucket: \"my-bucket\",\n    key: \"my-key\",\n    content: foo.then(foo =\u003e foo.content),\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_local as local\n\nfoo = local.get_sensitive_file(filename=f\"{path['module']}/foo.bar\")\nshared_zip = aws.s3.BucketObjectv2(\"sharedZip\",\n    bucket=\"my-bucket\",\n    key=\"my-key\",\n    content=foo.content)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Local = Pulumi.Local;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Local.GetSensitiveFile.Invoke(new()\n    {\n        Filename = $\"{path.Module}/foo.bar\",\n    });\n\n    var sharedZip = new Aws.S3.BucketObjectv2(\"sharedZip\", new()\n    {\n        Bucket = \"my-bucket\",\n        Key = \"my-key\",\n        Content = foo.Apply(getSensitiveFileResult =\u003e getSensitiveFileResult.Content),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3\"\n\t\"github.com/pulumi/pulumi-local/sdk/go/local\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := local.LookupSensitiveFile(ctx, \u0026local.LookupSensitiveFileArgs{\n\t\t\tFilename: fmt.Sprintf(\"%v/foo.bar\", path.Module),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = s3.NewBucketObjectv2(ctx, \"sharedZip\", \u0026s3.BucketObjectv2Args{\n\t\t\tBucket:  pulumi.Any(\"my-bucket\"),\n\t\t\tKey:     pulumi.String(\"my-key\"),\n\t\t\tContent: pulumi.String(foo.Content),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.local.LocalFunctions;\nimport com.pulumi.local.inputs.GetSensitiveFileArgs;\nimport com.pulumi.aws.s3.BucketObjectv2;\nimport com.pulumi.aws.s3.BucketObjectv2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LocalFunctions.getSensitiveFile(GetSensitiveFileArgs.builder()\n            .filename(String.format(\"%s/foo.bar\", path.module()))\n            .build());\n\n        var sharedZip = new BucketObjectv2(\"sharedZip\", BucketObjectv2Args.builder()        \n            .bucket(\"my-bucket\")\n            .key(\"my-key\")\n            .content(foo.applyValue(getSensitiveFileResult -\u003e getSensitiveFileResult.content()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sharedZip:\n    type: aws:s3:BucketObjectv2\n    properties:\n      bucket: my-bucket\n      key: my-key\n      content: ${foo.content}\nvariables:\n  foo:\n    fn::invoke:\n      Function: local:getSensitiveFile\n      Arguments:\n        filename: ${path.module}/foo.bar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSensitiveFile.\n",
                "properties": {
                    "filename": {
                        "type": "string",
                        "description": "Path to the file that will be read. The data source will return an error if the file does not exist.\n"
                    }
                },
                "type": "object",
                "required": [
                    "filename"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSensitiveFile.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Raw content of the file that was read, as UTF-8 encoded string. Files that do not contain UTF-8 text will have invalid UTF-8 sequences in `content`\nreplaced with the Unicode replacement character.\n",
                        "secret": true
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "Base64 encoded version of the file content (use this when dealing with binary data).\n",
                        "secret": true
                    },
                    "contentBase64sha256": {
                        "type": "string",
                        "description": "Base64 encoded SHA256 checksum of file content.\n"
                    },
                    "contentBase64sha512": {
                        "type": "string",
                        "description": "Base64 encoded SHA512 checksum of file content.\n"
                    },
                    "contentMd5": {
                        "type": "string",
                        "description": "MD5 checksum of file content.\n"
                    },
                    "contentSha1": {
                        "type": "string",
                        "description": "SHA1 checksum of file content.\n"
                    },
                    "contentSha256": {
                        "type": "string",
                        "description": "SHA256 checksum of file content.\n"
                    },
                    "contentSha512": {
                        "type": "string",
                        "description": "SHA512 checksum of file content.\n"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Path to the file that will be read. The data source will return an error if the file does not exist.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The hexadecimal encoding of the SHA1 checksum of the file content.\n"
                    }
                },
                "type": "object",
                "required": [
                    "content",
                    "contentBase64",
                    "contentBase64sha256",
                    "contentBase64sha512",
                    "contentMd5",
                    "contentSha1",
                    "contentSha256",
                    "contentSha512",
                    "filename",
                    "id"
                ]
            }
        }
    }
}