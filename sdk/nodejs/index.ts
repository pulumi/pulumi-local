// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { GetFileArgs, GetFileResult, GetFileOutputArgs } from "./getFile";
export const getFile: typeof import("./getFile").getFile = null as any;
export const getFileOutput: typeof import("./getFile").getFileOutput = null as any;
utilities.lazyLoad(exports, ["getFile","getFileOutput"], () => require("./getFile"));

export { GetSensitiveFileArgs, GetSensitiveFileResult, GetSensitiveFileOutputArgs } from "./getSensitiveFile";
export const getSensitiveFile: typeof import("./getSensitiveFile").getSensitiveFile = null as any;
export const getSensitiveFileOutput: typeof import("./getSensitiveFile").getSensitiveFileOutput = null as any;
utilities.lazyLoad(exports, ["getSensitiveFile","getSensitiveFileOutput"], () => require("./getSensitiveFile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SensitiveFileArgs, SensitiveFileState } from "./sensitiveFile";
export type SensitiveFile = import("./sensitiveFile").SensitiveFile;
export const SensitiveFile: typeof import("./sensitiveFile").SensitiveFile = null as any;
utilities.lazyLoad(exports, ["SensitiveFile"], () => require("./sensitiveFile"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "local:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "local:index/sensitiveFile:SensitiveFile":
                return new SensitiveFile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("local", "index/file", _module)
pulumi.runtime.registerResourceModule("local", "index/sensitiveFile", _module)
pulumi.runtime.registerResourcePackage("local", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:local") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
