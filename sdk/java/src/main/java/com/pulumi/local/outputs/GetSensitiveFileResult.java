// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.local.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSensitiveFileResult {
    /**
     * @return Raw content of the file that was read, as UTF-8 encoded string. Files that do not contain UTF-8 text will have invalid UTF-8 sequences in `content`
     * replaced with the Unicode replacement character.
     * 
     */
    private String content;
    /**
     * @return Base64 encoded version of the file content (use this when dealing with binary data).
     * 
     */
    private String contentBase64;
    /**
     * @return Base64 encoded SHA256 checksum of file content.
     * 
     */
    private String contentBase64sha256;
    /**
     * @return Base64 encoded SHA512 checksum of file content.
     * 
     */
    private String contentBase64sha512;
    /**
     * @return MD5 checksum of file content.
     * 
     */
    private String contentMd5;
    /**
     * @return SHA1 checksum of file content.
     * 
     */
    private String contentSha1;
    /**
     * @return SHA256 checksum of file content.
     * 
     */
    private String contentSha256;
    /**
     * @return SHA512 checksum of file content.
     * 
     */
    private String contentSha512;
    /**
     * @return Path to the file that will be read. The data source will return an error if the file does not exist.
     * 
     */
    private String filename;
    /**
     * @return The hexadecimal encoding of the SHA1 checksum of the file content.
     * 
     */
    private String id;

    private GetSensitiveFileResult() {}
    /**
     * @return Raw content of the file that was read, as UTF-8 encoded string. Files that do not contain UTF-8 text will have invalid UTF-8 sequences in `content`
     * replaced with the Unicode replacement character.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return Base64 encoded version of the file content (use this when dealing with binary data).
     * 
     */
    public String contentBase64() {
        return this.contentBase64;
    }
    /**
     * @return Base64 encoded SHA256 checksum of file content.
     * 
     */
    public String contentBase64sha256() {
        return this.contentBase64sha256;
    }
    /**
     * @return Base64 encoded SHA512 checksum of file content.
     * 
     */
    public String contentBase64sha512() {
        return this.contentBase64sha512;
    }
    /**
     * @return MD5 checksum of file content.
     * 
     */
    public String contentMd5() {
        return this.contentMd5;
    }
    /**
     * @return SHA1 checksum of file content.
     * 
     */
    public String contentSha1() {
        return this.contentSha1;
    }
    /**
     * @return SHA256 checksum of file content.
     * 
     */
    public String contentSha256() {
        return this.contentSha256;
    }
    /**
     * @return SHA512 checksum of file content.
     * 
     */
    public String contentSha512() {
        return this.contentSha512;
    }
    /**
     * @return Path to the file that will be read. The data source will return an error if the file does not exist.
     * 
     */
    public String filename() {
        return this.filename;
    }
    /**
     * @return The hexadecimal encoding of the SHA1 checksum of the file content.
     * 
     */
    public String id() {
        return this.id;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensitiveFileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String content;
        private String contentBase64;
        private String contentBase64sha256;
        private String contentBase64sha512;
        private String contentMd5;
        private String contentSha1;
        private String contentSha256;
        private String contentSha512;
        private String filename;
        private String id;
        public Builder() {}
        public Builder(GetSensitiveFileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.contentBase64 = defaults.contentBase64;
    	      this.contentBase64sha256 = defaults.contentBase64sha256;
    	      this.contentBase64sha512 = defaults.contentBase64sha512;
    	      this.contentMd5 = defaults.contentMd5;
    	      this.contentSha1 = defaults.contentSha1;
    	      this.contentSha256 = defaults.contentSha256;
    	      this.contentSha512 = defaults.contentSha512;
    	      this.filename = defaults.filename;
    	      this.id = defaults.id;
        }

        @CustomType.Setter
        public Builder content(String content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }
        @CustomType.Setter
        public Builder contentBase64(String contentBase64) {
            this.contentBase64 = Objects.requireNonNull(contentBase64);
            return this;
        }
        @CustomType.Setter
        public Builder contentBase64sha256(String contentBase64sha256) {
            this.contentBase64sha256 = Objects.requireNonNull(contentBase64sha256);
            return this;
        }
        @CustomType.Setter
        public Builder contentBase64sha512(String contentBase64sha512) {
            this.contentBase64sha512 = Objects.requireNonNull(contentBase64sha512);
            return this;
        }
        @CustomType.Setter
        public Builder contentMd5(String contentMd5) {
            this.contentMd5 = Objects.requireNonNull(contentMd5);
            return this;
        }
        @CustomType.Setter
        public Builder contentSha1(String contentSha1) {
            this.contentSha1 = Objects.requireNonNull(contentSha1);
            return this;
        }
        @CustomType.Setter
        public Builder contentSha256(String contentSha256) {
            this.contentSha256 = Objects.requireNonNull(contentSha256);
            return this;
        }
        @CustomType.Setter
        public Builder contentSha512(String contentSha512) {
            this.contentSha512 = Objects.requireNonNull(contentSha512);
            return this;
        }
        @CustomType.Setter
        public Builder filename(String filename) {
            this.filename = Objects.requireNonNull(filename);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public GetSensitiveFileResult build() {
            final var o = new GetSensitiveFileResult();
            o.content = content;
            o.contentBase64 = contentBase64;
            o.contentBase64sha256 = contentBase64sha256;
            o.contentBase64sha512 = contentBase64sha512;
            o.contentMd5 = contentMd5;
            o.contentSha1 = contentSha1;
            o.contentSha256 = contentSha256;
            o.contentSha512 = contentSha512;
            o.filename = filename;
            o.id = id;
            return o;
        }
    }
}
