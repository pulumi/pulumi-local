// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.local;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensitiveFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensitiveFileArgs Empty = new SensitiveFileArgs();

    /**
     * Sensitive Content to store in the file, expected to be a UTF-8 encoded string.
     * Conflicts with `content_base64` and `source`.
     * Exactly one of these three arguments must be specified.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return Sensitive Content to store in the file, expected to be a UTF-8 encoded string.
     * Conflicts with `content_base64` and `source`.
     * Exactly one of these three arguments must be specified.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Sensitive Content to store in the file, expected to be binary encoded as base64 string.
     * Conflicts with `content` and `source`.
     * Exactly one of these three arguments must be specified.
     * 
     */
    @Import(name="contentBase64")
    private @Nullable Output<String> contentBase64;

    /**
     * @return Sensitive Content to store in the file, expected to be binary encoded as base64 string.
     * Conflicts with `content` and `source`.
     * Exactly one of these three arguments must be specified.
     * 
     */
    public Optional<Output<String>> contentBase64() {
        return Optional.ofNullable(this.contentBase64);
    }

    /**
     * Permissions to set for directories created (before umask), expressed as string in
     * [numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).
     * Default value is `&#34;0700&#34;`.
     * 
     */
    @Import(name="directoryPermission")
    private @Nullable Output<String> directoryPermission;

    /**
     * @return Permissions to set for directories created (before umask), expressed as string in
     * [numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).
     * Default value is `&#34;0700&#34;`.
     * 
     */
    public Optional<Output<String>> directoryPermission() {
        return Optional.ofNullable(this.directoryPermission);
    }

    /**
     * Permissions to set for the output file (before umask), expressed as string in
     * [numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).
     * Default value is `&#34;0700&#34;`.
     * 
     */
    @Import(name="filePermission")
    private @Nullable Output<String> filePermission;

    /**
     * @return Permissions to set for the output file (before umask), expressed as string in
     * [numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).
     * Default value is `&#34;0700&#34;`.
     * 
     */
    public Optional<Output<String>> filePermission() {
        return Optional.ofNullable(this.filePermission);
    }

    /**
     * The path to the file that will be created.
     * Missing parent directories will be created.
     * If the file already exists, it will be overridden with the given content.
     * 
     */
    @Import(name="filename", required=true)
    private Output<String> filename;

    /**
     * @return The path to the file that will be created.
     * Missing parent directories will be created.
     * If the file already exists, it will be overridden with the given content.
     * 
     */
    public Output<String> filename() {
        return this.filename;
    }

    /**
     * Path to file to use as source for the one we are creating.
     * Conflicts with `content` and `content_base64`.
     * Exactly one of these three arguments must be specified.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Path to file to use as source for the one we are creating.
     * Conflicts with `content` and `content_base64`.
     * Exactly one of these three arguments must be specified.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    private SensitiveFileArgs() {}

    private SensitiveFileArgs(SensitiveFileArgs $) {
        this.content = $.content;
        this.contentBase64 = $.contentBase64;
        this.directoryPermission = $.directoryPermission;
        this.filePermission = $.filePermission;
        this.filename = $.filename;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensitiveFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensitiveFileArgs $;

        public Builder() {
            $ = new SensitiveFileArgs();
        }

        public Builder(SensitiveFileArgs defaults) {
            $ = new SensitiveFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content Sensitive Content to store in the file, expected to be a UTF-8 encoded string.
         * Conflicts with `content_base64` and `source`.
         * Exactly one of these three arguments must be specified.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Sensitive Content to store in the file, expected to be a UTF-8 encoded string.
         * Conflicts with `content_base64` and `source`.
         * Exactly one of these three arguments must be specified.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param contentBase64 Sensitive Content to store in the file, expected to be binary encoded as base64 string.
         * Conflicts with `content` and `source`.
         * Exactly one of these three arguments must be specified.
         * 
         * @return builder
         * 
         */
        public Builder contentBase64(@Nullable Output<String> contentBase64) {
            $.contentBase64 = contentBase64;
            return this;
        }

        /**
         * @param contentBase64 Sensitive Content to store in the file, expected to be binary encoded as base64 string.
         * Conflicts with `content` and `source`.
         * Exactly one of these three arguments must be specified.
         * 
         * @return builder
         * 
         */
        public Builder contentBase64(String contentBase64) {
            return contentBase64(Output.of(contentBase64));
        }

        /**
         * @param directoryPermission Permissions to set for directories created (before umask), expressed as string in
         * [numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).
         * Default value is `&#34;0700&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder directoryPermission(@Nullable Output<String> directoryPermission) {
            $.directoryPermission = directoryPermission;
            return this;
        }

        /**
         * @param directoryPermission Permissions to set for directories created (before umask), expressed as string in
         * [numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).
         * Default value is `&#34;0700&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder directoryPermission(String directoryPermission) {
            return directoryPermission(Output.of(directoryPermission));
        }

        /**
         * @param filePermission Permissions to set for the output file (before umask), expressed as string in
         * [numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).
         * Default value is `&#34;0700&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder filePermission(@Nullable Output<String> filePermission) {
            $.filePermission = filePermission;
            return this;
        }

        /**
         * @param filePermission Permissions to set for the output file (before umask), expressed as string in
         * [numeric notation](https://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation).
         * Default value is `&#34;0700&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder filePermission(String filePermission) {
            return filePermission(Output.of(filePermission));
        }

        /**
         * @param filename The path to the file that will be created.
         * Missing parent directories will be created.
         * If the file already exists, it will be overridden with the given content.
         * 
         * @return builder
         * 
         */
        public Builder filename(Output<String> filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param filename The path to the file that will be created.
         * Missing parent directories will be created.
         * If the file already exists, it will be overridden with the given content.
         * 
         * @return builder
         * 
         */
        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        /**
         * @param source Path to file to use as source for the one we are creating.
         * Conflicts with `content` and `content_base64`.
         * Exactly one of these three arguments must be specified.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Path to file to use as source for the one we are creating.
         * Conflicts with `content` and `content_base64`.
         * Exactly one of these three arguments must be specified.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public SensitiveFileArgs build() {
            if ($.filename == null) {
                throw new MissingRequiredPropertyException("SensitiveFileArgs", "filename");
            }
            return $;
        }
    }

}
