// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.local;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.local.Utilities;
import com.pulumi.local.inputs.GetFileArgs;
import com.pulumi.local.inputs.GetFilePlainArgs;
import com.pulumi.local.inputs.GetSensitiveFileArgs;
import com.pulumi.local.inputs.GetSensitiveFilePlainArgs;
import com.pulumi.local.outputs.GetFileResult;
import com.pulumi.local.outputs.GetSensitiveFileResult;
import java.util.concurrent.CompletableFuture;

public final class LocalFunctions {
    /**
     * Reads a file from the local filesystem.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.local.LocalFunctions;
     * import com.pulumi.local.inputs.GetFileArgs;
     * import com.pulumi.aws.s3.BucketObjectv2;
     * import com.pulumi.aws.s3.BucketObjectv2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LocalFunctions.getFile(GetFileArgs.builder()
     *             .filename(String.format(&#34;%s/foo.bar&#34;, path.module()))
     *             .build());
     * 
     *         var sharedZip = new BucketObjectv2(&#34;sharedZip&#34;, BucketObjectv2Args.builder()        
     *             .bucket(&#34;my-bucket&#34;)
     *             .key(&#34;my-key&#34;)
     *             .content(foo.applyValue(getFileResult -&gt; getFileResult.content()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args) {
        return getFile(args, InvokeOptions.Empty);
    }
    /**
     * Reads a file from the local filesystem.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.local.LocalFunctions;
     * import com.pulumi.local.inputs.GetFileArgs;
     * import com.pulumi.aws.s3.BucketObjectv2;
     * import com.pulumi.aws.s3.BucketObjectv2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LocalFunctions.getFile(GetFileArgs.builder()
     *             .filename(String.format(&#34;%s/foo.bar&#34;, path.module()))
     *             .build());
     * 
     *         var sharedZip = new BucketObjectv2(&#34;sharedZip&#34;, BucketObjectv2Args.builder()        
     *             .bucket(&#34;my-bucket&#34;)
     *             .key(&#34;my-key&#34;)
     *             .content(foo.applyValue(getFileResult -&gt; getFileResult.content()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args) {
        return getFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * Reads a file from the local filesystem.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.local.LocalFunctions;
     * import com.pulumi.local.inputs.GetFileArgs;
     * import com.pulumi.aws.s3.BucketObjectv2;
     * import com.pulumi.aws.s3.BucketObjectv2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LocalFunctions.getFile(GetFileArgs.builder()
     *             .filename(String.format(&#34;%s/foo.bar&#34;, path.module()))
     *             .build());
     * 
     *         var sharedZip = new BucketObjectv2(&#34;sharedZip&#34;, BucketObjectv2Args.builder()        
     *             .bucket(&#34;my-bucket&#34;)
     *             .key(&#34;my-key&#34;)
     *             .content(foo.applyValue(getFileResult -&gt; getFileResult.content()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("local:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Reads a file from the local filesystem.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.local.LocalFunctions;
     * import com.pulumi.local.inputs.GetFileArgs;
     * import com.pulumi.aws.s3.BucketObjectv2;
     * import com.pulumi.aws.s3.BucketObjectv2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LocalFunctions.getFile(GetFileArgs.builder()
     *             .filename(String.format(&#34;%s/foo.bar&#34;, path.module()))
     *             .build());
     * 
     *         var sharedZip = new BucketObjectv2(&#34;sharedZip&#34;, BucketObjectv2Args.builder()        
     *             .bucket(&#34;my-bucket&#34;)
     *             .key(&#34;my-key&#34;)
     *             .content(foo.applyValue(getFileResult -&gt; getFileResult.content()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("local:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Reads a file that contains sensitive data, from the local filesystem.
     * 
     * The attributes exposed by this data source are marked as
     * sensitive.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.local.LocalFunctions;
     * import com.pulumi.local.inputs.GetSensitiveFileArgs;
     * import com.pulumi.aws.s3.BucketObjectv2;
     * import com.pulumi.aws.s3.BucketObjectv2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LocalFunctions.getSensitiveFile(GetSensitiveFileArgs.builder()
     *             .filename(String.format(&#34;%s/foo.bar&#34;, path.module()))
     *             .build());
     * 
     *         var sharedZip = new BucketObjectv2(&#34;sharedZip&#34;, BucketObjectv2Args.builder()        
     *             .bucket(&#34;my-bucket&#34;)
     *             .key(&#34;my-key&#34;)
     *             .content(foo.applyValue(getSensitiveFileResult -&gt; getSensitiveFileResult.content()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSensitiveFileResult> getSensitiveFile(GetSensitiveFileArgs args) {
        return getSensitiveFile(args, InvokeOptions.Empty);
    }
    /**
     * Reads a file that contains sensitive data, from the local filesystem.
     * 
     * The attributes exposed by this data source are marked as
     * sensitive.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.local.LocalFunctions;
     * import com.pulumi.local.inputs.GetSensitiveFileArgs;
     * import com.pulumi.aws.s3.BucketObjectv2;
     * import com.pulumi.aws.s3.BucketObjectv2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LocalFunctions.getSensitiveFile(GetSensitiveFileArgs.builder()
     *             .filename(String.format(&#34;%s/foo.bar&#34;, path.module()))
     *             .build());
     * 
     *         var sharedZip = new BucketObjectv2(&#34;sharedZip&#34;, BucketObjectv2Args.builder()        
     *             .bucket(&#34;my-bucket&#34;)
     *             .key(&#34;my-key&#34;)
     *             .content(foo.applyValue(getSensitiveFileResult -&gt; getSensitiveFileResult.content()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSensitiveFileResult> getSensitiveFilePlain(GetSensitiveFilePlainArgs args) {
        return getSensitiveFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * Reads a file that contains sensitive data, from the local filesystem.
     * 
     * The attributes exposed by this data source are marked as
     * sensitive.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.local.LocalFunctions;
     * import com.pulumi.local.inputs.GetSensitiveFileArgs;
     * import com.pulumi.aws.s3.BucketObjectv2;
     * import com.pulumi.aws.s3.BucketObjectv2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LocalFunctions.getSensitiveFile(GetSensitiveFileArgs.builder()
     *             .filename(String.format(&#34;%s/foo.bar&#34;, path.module()))
     *             .build());
     * 
     *         var sharedZip = new BucketObjectv2(&#34;sharedZip&#34;, BucketObjectv2Args.builder()        
     *             .bucket(&#34;my-bucket&#34;)
     *             .key(&#34;my-key&#34;)
     *             .content(foo.applyValue(getSensitiveFileResult -&gt; getSensitiveFileResult.content()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSensitiveFileResult> getSensitiveFile(GetSensitiveFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("local:index/getSensitiveFile:getSensitiveFile", TypeShape.of(GetSensitiveFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Reads a file that contains sensitive data, from the local filesystem.
     * 
     * The attributes exposed by this data source are marked as
     * sensitive.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.local.LocalFunctions;
     * import com.pulumi.local.inputs.GetSensitiveFileArgs;
     * import com.pulumi.aws.s3.BucketObjectv2;
     * import com.pulumi.aws.s3.BucketObjectv2Args;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LocalFunctions.getSensitiveFile(GetSensitiveFileArgs.builder()
     *             .filename(String.format(&#34;%s/foo.bar&#34;, path.module()))
     *             .build());
     * 
     *         var sharedZip = new BucketObjectv2(&#34;sharedZip&#34;, BucketObjectv2Args.builder()        
     *             .bucket(&#34;my-bucket&#34;)
     *             .key(&#34;my-key&#34;)
     *             .content(foo.applyValue(getSensitiveFileResult -&gt; getSensitiveFileResult.content()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSensitiveFileResult> getSensitiveFilePlain(GetSensitiveFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("local:index/getSensitiveFile:getSensitiveFile", TypeShape.of(GetSensitiveFileResult.class), args, Utilities.withVersion(options));
    }
}
